generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  email     String         @unique
  password  String
  name      String?
  phone     String?
  emailVerifiedAt DateTime?
  phoneVerifiedAt DateTime?
  role      Role           @default(user)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  cart      CartItem[]
  orders    Order[]
  reviews   Review[]
  wishlist  WishlistItem[]
  addresses Address[]
  // Back-relations
  chatThreads ChatThread[]
  messages    ChatMessage[]
  sessions    Session[]
  authTokens  AuthToken[]
  // Delivery back-relations
  deliveryProfile      DeliveryProfile?
  deliveryConfirmations DeliveryConfirmation[]
  deliveryOtps          DeliveryOtp[]
}

model Brand {
  id            String    @id @default(uuid())
  slug          String    @unique
  nameAr        String
  nameEn        String
  descriptionAr String?
  descriptionEn String?
  logo          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  products      Product[]
}

model Product {
  id         String             @id @default(uuid())
  slug       String             @unique
  nameAr     String
  nameEn     String
  shortAr    String?
  shortEn    String?
  category   String
  price      Float
  oldPrice   Float?
  image      String?
  rating     Int                @default(0)
  stock      Int                @default(0)
  deletedAt  DateTime?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  brandId    String?
  cart       CartItem[]
  orderItems OrderItem[]
  brand      Brand?             @relation(fields: [brandId], references: [id])
  images     ProductImage[]
  tierPrices ProductTierPrice[]
  reviews    Review[]
  wishlist   WishlistItem[]

  @@index([brandId], map: "Product_brandId_fkey")
}

model Category {
  id            String   @id @default(uuid())
  slug          String   @unique
  nameAr        String
  nameEn        String
  descriptionAr String?
  descriptionEn String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  deletedAt     DateTime?
  status        String      @default("pending")
  currency      String      @default("SAR")
  subtotal      Float       @default(0)
  discount      Float       @default(0)
  tax           Float       @default(0)
  grandTotal    Float       @default(0)
  paymentMethod String?
  paymentMeta   Json?
  // Delivery fields
  deliveryStatus      String      @default("unassigned")
  deliveryDriverId    String?
  acceptedAt          DateTime?
  outForDeliveryAt    DateTime?
  deliveredAt         DateTime?
  failedAt            DateTime?
  deliveryDurationSec Int?
  deliveryLocation    Json?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]

  shipments     Shipment[]
  // Delivery back-relations
  deliveryConfirmations DeliveryConfirmation[]
  deliveryOtps          DeliveryOtp[]

  @@index([userId], map: "Order_userId_fkey")
  @@index([deliveryDriverId])
  @@index([deliveryStatus])
  @@index([outForDeliveryAt])
  @@index([deliveredAt])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  deletedAt DateTime?
  nameAr    String
  nameEn    String
  price     Float
  quantity  Int     @default(1)
  oldPrice  Float?
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model Shipment {
  id             String   @id @default(uuid())
  orderId        String
  provider       String
  trackingNumber String   @unique
  status         String   @default("created")
  meta           Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId], map: "Shipment_orderId_fkey")
}

model Review {
  id        String       @id @default(uuid())
  productId String
  userId    String
  rating    Int
  title     String?
  body      String?
  status    ReviewStatus @default(pending)
  deletedAt DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  product   Product      @relation(fields: [productId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@index([productId], map: "Review_productId_fkey")
  @@index([userId], map: "Review_userId_fkey")
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  deletedAt DateTime?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@index([productId], map: "WishlistItem_productId_fkey")
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  deletedAt DateTime?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@index([productId], map: "CartItem_productId_fkey")
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  altEn     String?
  altAr     String?
  sort      Int      @default(0)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId], map: "ProductImage_productId_fkey")
}

model ProductTierPrice {
  id            String        @id @default(uuid())
  productId     String
  minQty        Int
  price         Float
  packagingType PackagingType @default(unit)
  noteAr        String?
  noteEn        String?
  deletedAt     DateTime?
  createdAt     DateTime      @default(now())
  product       Product       @relation(fields: [productId], references: [id])

  @@unique([productId, minQty, packagingType])
}

model MarketingFeature {
  id        String   @id @default(uuid())
  titleAr   String
  titleEn   String
  bodyAr    String?
  bodyEn    String?
  icon      String?
  sort      Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MarketingBanner {
  id        String         @id @default(uuid())
  location  BannerLocation
  titleAr   String?
  titleEn   String?
  bodyAr    String?
  bodyEn    String?
  image     String?
  linkUrl   String?
  active    Boolean        @default(true)
  sort      Int            @default(0)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model AppLink {
  id        String   @id @default(uuid())
  platform  Platform
  url       String
  labelAr   String?
  labelEn   String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  label     String?
  name      String?
  phone     String?
  country   String   @default("Yemen")
  city      String
  district  String?
  street    String
  building  String?
  apartment String?
  notes     String?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  entity    String
  entityId  String?
  userId    String?
  meta      Json?
  createdAt DateTime @default(now())

  @@index([entity])
  @@index([action])
  @@index([createdAt])
}

// Delivery driver profile
model DeliveryProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  online           Boolean  @default(false)
  vehicleType      String?
  licensePlate     String?
  lastKnownLocation Json?
  lastSeenAt       DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([updatedAt])
}

// Delivery confirmations (proof photo, signature, or OTP)
model DeliveryConfirmation {
  id            String   @id @default(uuid())
  orderId       String
  driverId      String
  method        String   // 'photo' | 'signature' | 'otp' | 'other'
  photoUrl      String?
  signatureUrl  String?
  otpVerifiedAt DateTime?
  otpLast4      String?
  note          String?
  createdAt     DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [driverId], references: [id])

  @@index([orderId])
  @@index([driverId])
  @@index([createdAt])
}

// Delivery OTP storage
model DeliveryOtp {
  id         String   @id @default(uuid())
  orderId    String
  userId     String
  codeHash   String
  active     Boolean  @default(true)
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId])
  @@index([active])
  @@index([expiresAt])
}

model ChatThread {
  id        String   @id @default(uuid())
  title     String?
  userId    String   // owner (customer) or null for system
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages  ChatMessage[]
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ChatMessage {
  id        String   @id @default(uuid())
  threadId  String
  fromId    String?
  fromName  String?
  text      String
  meta      Json?
  createdAt DateTime @default(now())

  thread    ChatThread @relation(fields: [threadId], references: [id])
  from      User?      @relation(fields: [fromId], references: [id])

  @@index([threadId])
}

model storesetting {
  id              String   @id @default("singleton")
  siteNameAr      String?
  siteNameEn      String?
  logo            String?
  colorPrimary    String?
  colorSecondary  String?
  colorAccent     String?
  taxNumber       String?
  supportPhone    String?
  supportMobile   String?
  supportWhatsapp String?
  supportEmail    String?
  supportHours    String?
  footerAboutAr   String?
  footerAboutEn   String?
  linkBlog        String?
  linkSocial      String?
  linkReturns     String?
  linkPrivacy     String?
  appStoreUrl     String?
  playStoreUrl    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime
}

enum Role {
  user
  admin
  seller
  delivery
}

enum ReviewStatus {
  pending
  approved
  rejected
}

enum PackagingType {
  unit
  carton
  bundle
}

enum BannerLocation {
  topStrip
  homepage
  footer
}

enum Platform {
  ios
  android
  web
}

// Session model for refresh tokens / device sessions
model Session {
  id          String   @id @default(uuid())
  userId      String
  refreshHash String   @unique
  userAgent   String?
  ip          String?
  lastUsedAt  DateTime?
  revokedAt   DateTime?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Generic auth tokens (email verify, password reset, phone verify, legacy refresh)
model AuthToken {
  id         String   @id @default(uuid())
  userId     String
  type       String
  tokenHash  String?
  code       String?
  meta       Json?
  consumedAt DateTime?
  expiresAt  DateTime?
  createdAt  DateTime @default(now())
  // Optional request context (used by server code)
  userAgent  String?
  ip         String?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([tokenHash])
  @@index([code])
  @@index([expiresAt])
}
